name: Run Pytest
on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      mysql-version:
        default: ""
        type: string
      postgres: # todo
        default: false
        type: boolean
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: test
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h mysql -u root" --health-interval=20s --health-timeout=5s --health-retries=3
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{inputs.python-version}}
      - name: Install dependencies
        run: |
          pip install boto3 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # - name: check mysql version
      #   run: |
      #     echo "mysql version: $mysql-version"
      # - name: wants mysql
      #   if: ${{inputs.mysql-version}}
      #   run: |
      #     echo "should run mysql"
      # - uses: mirromutth/mysql-action@v1.1
      #   if: ${{inputs.mysql-version}}
      #   with:
      #     mysql version: ${{inputs.mysql-version}} # Optional, default value is "latest". The version of the MySQL
      #     mysql database: "test" # Optional, default value is "test". The specified database which will be create
      #     mysql user: "root" # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
      #     mysql password: "" # Required if "mysql user" exists. The password for the "mysql user"
      # - name: Setup MySQL DB
      #   if: ${{inputs.mysql-version}}
      #   run: |
      #     mysql -uroot -h127.0.0.1 -e 'SELECT version()'
      # - name: Setup MySQL DB
      #   if: ${{inputs.mysql-version}}
      #   run: |
      #     sudo /etc/init.d/mysql start
      #     mysql -e 'CREATE DATABASE test;' -uroot --skip-password
      #     mysql -e 'SHOW DATABASES;' -uroot --skip-password
      # - name: Setup MySQL DB
      #   if: ${{inputs.mysql-version}}
      #   env:
      #     MYSQL_DATABASE: test
      #     MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      #   run: |
      #     docker run -d -p 3600:3600 -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -e MYSQL_DATABASE=test --health-cmd="mysqladmin ping -h mysql -u root" --health-interval=20s --health-timeout=5s --health-retries=3 mysql:${{inputs.mysql-version}}
      - name: Test with pytest
        run: pytest -m "not integration"
        env:
          TEST_DB_HOST: 127.0.0.1
